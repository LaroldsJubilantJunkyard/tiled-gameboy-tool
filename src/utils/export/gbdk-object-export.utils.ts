import { ExecutionData, ExportListItem, ObjectField } from "../../models/tiled-gameboy-tool-types"
import { getObjectFieldDeclaration } from "../code-gen.utils"
import { getObjectStructName } from "../export.utils"
import {sep} from 'path'
import { getIdentifierForString } from "../string.utils"


const getStructDataString =(executionData:ExecutionData)=>{
    
    // If the user passes --object-struct-name, use it's value
    if(executionData.objectStructName){

        return `struct ${executionData.objectStructName};`

    // If the user doesn't pass --object-struct-name, declare our own structure
    }else{

        return  `
typedef struct ${executionData.identifier}_Object {

    uint16_t y;
    uint16_t x;
    uint8_t id;
    ${executionData.objectFields.map(getObjectFieldDeclaration).join("\n")}

} ${executionData.identifier}_Object; `

    }
    
}

const getGBDKObjectHExport = (executionData:ExecutionData)=>{
    var objectStructName= getObjectStructName(executionData);

    const writeHContent = `
//AUTOGENERATED FILE FROM tiled-gameboy-tool

#include <stdint.h>
#include <gbdk/platform.h>

#define ${executionData.identifier}_OBJECT_COUNT ${executionData.totalObjects.length}

${getStructDataString(executionData)}

const ${objectStructName} ${executionData.identifier}Objects[${executionData.totalObjects.length}];

${executionData.objectStrings.map(x=>"const unsigned char *"+x.name+";").join("\n")}
    
    `
    return writeHContent
}


const getGBDKObjectCExport = (executionData:ExecutionData)=>{
    var objectStructName= getObjectStructName(executionData);
    
    const stringFields:ObjectField[] = executionData.objectFields.filter(x=>x.type=="string")
    const stringsArrays:any[] = executionData.totalObjects.map(obj=>{
        return stringFields.map(str=>{return {content:obj[str.name],identifier:getIdentifierForString("object_"+obj.id+"_"+str.name)}}).filter(x=>x.content!="")
    })
    const strings:any[] = [].concat.apply([],stringsArrays)

    const mappedObjects = executionData.totalObjects.map((totalObject)=>{
        
        // Get fields that are not 'x', 'y', or 'id'
        // We will manually map those in order
        const otherFields = Object.keys(totalObject).filter(x=>x!="y"&&x!="x"&&x!="id").map(x=>{
            const field = executionData.objectFields.find(y=>y.name==x)
            if(field){
                if(field.type=="string"){
                    var str = strings.find(z=>z.content==totalObject[x])
                    if(!str)return 0
                    return str.identifier
                }
            }
            return totalObject[x]
        }).join(",")

        return `{${totalObject.y},${totalObject.x},${totalObject.id},${otherFields}}`
    })
    
    const writeCContent = `
//AUTOGENERATED FILE FROM tiled-gameboy-tool

#include <stdint.h>
#include <gbdk/platform.h>
#include "${executionData.identifier}_objects.h"

${strings.map(x=>`const unsigned char *${x.identifier}=\"${x.content}\";`).join("\n")}

const ${objectStructName} ${executionData.identifier}Objects[ ${executionData.totalObjects.length}]={

    ${mappedObjects.join(",\n")}
};
    
    `
    return writeCContent;
}


export const getGBDKObjectExport = (executionData:ExecutionData):ExportListItem[]=>{
    return [
        {
            contents:getGBDKObjectCExport(executionData),
            file: `${executionData.outputDirectory+sep+executionData.identifier}_objects.c`
        },
        {
            contents:getGBDKObjectHExport(executionData),
            file: `${executionData.outputDirectory+sep+executionData.identifier}_objects.h`
        }
    ]
}
