import { ExecutionData, ExportListItem } from "../../models/tiled-gameboy-tool-types"
import {sep} from 'path'

const mapToTabbedByteRow = (x:string[])=>"\tDB "+x.map(x=>"$"+Number(x).toString(16)).join(",").toUpperCase()

const getRGBDSExportContents = (executionData:ExecutionData)=>{

    var rows:string[][] = [];
    var rowsAttributes:string[][] = [];

    for(var i=0;i<executionData.finalItems.length;i++){

        var row = Math.floor(i/executionData.mapWidth);

        if(row>=rows.length){
            rows.push([])
            rowsAttributes.push([])
        }

        rows[row].push(executionData.finalItems[i].index+"")
        rowsAttributes[row].push("0")
    }

    var mappedRows = rows.map(mapToTabbedByteRow)
    var mappedRowsAttributes = rowsAttributes.map(mapToTabbedByteRow)
    
    const writeContent = `
;AUTOGENERATED FILE FROM tiled-gameboy-tool

SECTION "${executionData.identifier}TilemapSection", ROM0

${executionData.identifier}_Map::
${mappedRows.join("\n")}
${executionData.identifier}_MapEnd::

${executionData.identifier}_Map_Attributes::
${mappedRowsAttributes.join("\n")}
${executionData.identifier}_Map_AttributesEnd::
    
    `
    return writeContent;
}


export const getRGBDSExport = (executionData:ExecutionData,exportList: ExportListItem[] ):void=>{
    exportList[0].contents.push(getRGBDSExportContents(executionData))
}
