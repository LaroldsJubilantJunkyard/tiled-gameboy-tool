import { ExecutionData, ObjectField } from "../models/tiled-gameboy-tool-types";
import fs from 'fs'
import {sep} from 'path'
import { singleItemOrArray } from "../utils/micc.utils";
import { ITiledMapObjectGroupObject, ITiledTilesetDataTileProperty } from "../models/tiled-types";

export const getObjectFieldDeclaration = (objectField:ObjectField):string=>{
    switch(objectField.type){
        case "integer": return `uint8_t ${objectField.name};`;
        case "string": return `char *${objectField.name};`;
        case "boolean": return `uint8_t ${objectField.name};`;
    }
    return ""
}

export const getTotalObjectArrayObject = (totalObject:any):string=>{

    const otherFields = Object.keys(totalObject).filter(x=>x!="y"&&x!="x"&&x!="id").map(x=>totalObject[x]).join(",")

    return `{${totalObject.y},${totalObject.x},${totalObject.id},${otherFields}}`
}

export default (data:any,executionData:ExecutionData)=>{

    const fields = data as string[]

    console.log("object fields to output: "+data)

    var totalObjects:any = []

    var strings:any[] = [];

    const fieldNames = executionData.objectFields.map(x=>x.name)

    executionData.objectGroups.forEach(objectGroup=>{

        const objects:ITiledMapObjectGroupObject[] = singleItemOrArray(objectGroup.object)

        objects.forEach((object:ITiledMapObjectGroupObject)=>{

            var data:any = {x:Math.floor(Number(object.x)),y:Math.floor(Number(object.y)),id:Number(object.id)}

            // Apply default value to all properties to things
            executionData.objectFields.forEach(field=>{
                data[field.name] = 0
            })

            singleItemOrArray(object.properties.property).forEach((property:ITiledTilesetDataTileProperty)=>{

                if(fieldNames.includes(property.name)){
                    
                    var val:any = property.value

                    var field = executionData.objectFields.find(x=>x.name==property.name)

                    if(field){

                        console.log("got field "+field.name+" is a "+field.type)

                        if(field.type=="string"){
                            var stringConstantName = executionData.identifier+"_"+data.id+"_"+property.name
                            strings.push({name:stringConstantName,value:val})
                            data[property.name]=stringConstantName
                        }else{
    
                            data[property.name]=!Number.isNaN(Number(val)) ? Number(val) : val
                        }
                    }

                }
            })

            totalObjects.push(data)
        })
    })
    
    const writeHContent = `
//AUTOGENERATED FILE FROM tiled-gameboy-tool

#include <stdint.h>
#include <gbdk/platform.h>

#define ${executionData.identifier}_OBJECT_COUNT ${totalObjects.length}
    
struct ${executionData.identifier}_Object {

    uint16_t y;
    uint16_t x;
    uint8_t id;
    ${executionData.objectFields.map(getObjectFieldDeclaration).join("\n")}

} ${executionData.identifier}_Object;

const ${executionData.identifier}_Object ${executionData.identifier}Objects[ ${totalObjects.length}];

${strings.map(x=>"const unsigned char *"+x.name+";").join("\n")}

    
    `
    
    const writeCContent = `
//AUTOGENERATED FILE FROM tiled-gameboy-tool

#include <stdint.h>
#include <gbdk/platform.h>
#include "${executionData.identifier}_objects.h"

${strings.map(x=>"const unsigned char *"+x.name+"=\""+x.value+"\"").join(";\n")}

const ${executionData.identifier}_Object ${executionData.identifier}Objects[ ${totalObjects.length}]={

    ${totalObjects.map(getTotalObjectArrayObject).join(",\n")}
};
    
    `

    fs.writeFileSync(`${executionData.outputDirectory+sep+executionData.identifier}_objects.c`,writeCContent )
    fs.writeFileSync(`${executionData.outputDirectory+sep+executionData.identifier}_objects.h`,writeHContent )
}